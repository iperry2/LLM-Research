from openai import AssistantEventHandler, OpenAI
from typing_extensions import override
import os

class EventHandler(AssistantEventHandler):
    @override
    def on_text_created(self, text) -> None:
        print(f"\nassistant > ", end="", flush=True)

    @override
    def on_tool_call_created(self, tool_call):
        print(f"\nassistant > {tool_call.type}\n", flush=True)

    @override
    def on_message_done(self, message) -> None:
        # print a citation to the file searched
        message_content = message.content[0].text
        annotations = message_content.annotations
        citations = []
        for index, annotation in enumerate(annotations):
            message_content.value = message_content.value.replace(
                annotation.text, f"[{index}]"
            )
            if file_citation := getattr(annotation, "file_citation", None):
                cited_file = client.files.retrieve(file_citation.file_id)
                citations.append(f"[{index}] {cited_file.filename}")

        print(message_content.value)
        print("\n".join(citations))


# Set your OpenAI API key as the environment variable OPENAI_API_KEY
os.environ['OPENAI_API_KEY'] = 'REMOVED'
OpenAI.api_key = os.getenv('OPENAI_API_KEY')
 
client = OpenAI()
 
assistant = client.beta.assistants.create(
  name="Scientific Literature Analyst Assistant",
  instructions="You are an expert scientific literature analyst. Use you knowledge base to answer questions about and analyze scientific literature.",
  model="gpt-4o",
  tools=[{"type": "file_search"}],
)

def main():

    # Create a vector store 
    vector_store = client.beta.vector_stores.create(name="Sample Article DataBase")
 
    # Ready the files for upload to OpenAI
    file_paths = ["/Users/ian/VS-Projects/TextSummary-FalconAI(HF)/Sample-DataFrame/BlackHole.pdf", 
                  "/Users/ian/VS-Projects/TextSummary-FalconAI(HF)/Sample-DataFrame/Quasar1.pdf", 
                  "/Users/ian/VS-Projects/TextSummary-FalconAI(HF)/Sample-DataFrame/AI-SLR-Paper.pdf", 
                  "/Users/ian/VS-Projects/TextSummary-FalconAI(HF)/Sample-DataFrame/AI-Lit-Review.pdf", 
                  "/Users/ian/VS-Projects/TextSummary-FalconAI(HF)/Sample-DataFrame/Quasar2.pdf", 
                  "/Users/ian/VS-Projects/TextSummary-FalconAI(HF)/Sample-DataFrame/SpectralLines.pdf" ]
    file_streams = [open(path, "rb") for path in file_paths]
 
    # Use the upload and poll SDK helper to upload the files, add them to the vector store,
    # and poll the status of the file batch for completion.
    file_batch = client.beta.vector_stores.file_batches.upload_and_poll(
        vector_store_id=vector_store.id, files=file_streams
    )
 
    # You can print the status and the file counts of the batch to see the result of this operation.
    print(file_batch.status)
    print(file_batch.file_counts)

    # Update the assistant to use the vector store
    global assistant
    assistant = client.beta.assistants.update(
        assistant_id=assistant.id,
        tool_resources={"file_search": {"vector_store_ids": [vector_store.id]}},
    )
 
    # Create a thread and attach the file to the message
    thread = client.beta.threads.create(
      messages=[
        {
            "role": "user",
            "content": "Are the papers in the Vector store related?",
        }
     ],
     tool_resources={"file_search": {"vector_store_ids": [vector_store.id]}},
    )
 
    # The thread now has a vector store with that file in its tool resources.
    # print(thread.tool_resources.file_search)    
    
    # Poll the thread for a response from the assistant
    #response = client.beta.threads.poll(thread_id=thread.id)
    # print(response.messages[-1]['content'])  # Print the assistant's response
    
    # Then, we use the `stream` SDK helper 
    # with the `EventHandler` class to create the Run 
    # and stream the response.
 
    with client.beta.threads.runs.stream(
        thread_id=thread.id,
        assistant_id=assistant.id,
        instructions="Please address the user as Jane Doe. The user has a premium account.",
        event_handler=EventHandler(),
    ) as stream:
        stream.until_done()   

if __name__ == "__main__":
    main()
